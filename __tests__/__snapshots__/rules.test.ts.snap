// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`collection-names-case.failures 1`] = `
Array [
  RuleFailure {
    "options": Object {
      "collectionName": "_123",
    },
    "rule": Rule {
      "options": Object {
        "case": "camel",
        "severity": "warning",
      },
    },
  },
  RuleFailure {
    "options": Object {
      "collectionName": "flower_bed",
    },
    "rule": Rule {
      "options": Object {
        "case": "camel",
        "severity": "warning",
      },
    },
  },
  RuleFailure {
    "options": Object {
      "collectionName": "my_flowerBed",
    },
    "rule": Rule {
      "options": Object {
        "case": "camel",
        "severity": "warning",
      },
    },
  },
  RuleFailure {
    "options": Object {
      "collectionName": "",
    },
    "rule": Rule {
      "options": Object {
        "case": "snake",
        "severity": "warning",
      },
    },
  },
  RuleFailure {
    "options": Object {
      "collectionName": "_123",
    },
    "rule": Rule {
      "options": Object {
        "case": "snake",
        "severity": "warning",
      },
    },
  },
  RuleFailure {
    "options": Object {
      "collectionName": "123",
    },
    "rule": Rule {
      "options": Object {
        "case": "snake",
        "severity": "warning",
      },
    },
  },
  RuleFailure {
    "options": Object {
      "collectionName": "flowerBed",
    },
    "rule": Rule {
      "options": Object {
        "case": "snake",
        "severity": "warning",
      },
    },
  },
  RuleFailure {
    "options": Object {
      "collectionName": "my_flowerBed",
    },
    "rule": Rule {
      "options": Object {
        "case": "snake",
        "severity": "warning",
      },
    },
  },
]
`;

exports[`collection-names-case.failuresJson 1`] = `
Array [
  Object {
    "failure": "Collection name **_123** is not in camel case.",
    "hash": "Mb816",
    "location": Object {
      "collectionName": "_123",
    },
    "options": Object {
      "case": "camel",
      "severity": "warning",
    },
    "ruleMetadata": Object {
      "description": "Make sure all collection names in the database have the right case.",
      "granularity": "CollectionName",
      "isFuzzy": false,
      "name": "collection-names-case",
      "prettyName": "Collection names camel/snake case",
      "rationale": "Reads more fluently.",
    },
    "suggestion": "Change *_123* to *123*.",
  },
  Object {
    "failure": "Collection name **flower_bed** is not in camel case.",
    "hash": "Mf213",
    "location": Object {
      "collectionName": "flower_bed",
    },
    "options": Object {
      "case": "camel",
      "severity": "warning",
    },
    "ruleMetadata": Object {
      "description": "Make sure all collection names in the database have the right case.",
      "granularity": "CollectionName",
      "isFuzzy": false,
      "name": "collection-names-case",
      "prettyName": "Collection names camel/snake case",
      "rationale": "Reads more fluently.",
    },
    "suggestion": "Change *flower_bed* to *flowerBed*.",
  },
  Object {
    "failure": "Collection name **my_flowerBed** is not in camel case.",
    "hash": "Mc26c",
    "location": Object {
      "collectionName": "my_flowerBed",
    },
    "options": Object {
      "case": "camel",
      "severity": "warning",
    },
    "ruleMetadata": Object {
      "description": "Make sure all collection names in the database have the right case.",
      "granularity": "CollectionName",
      "isFuzzy": false,
      "name": "collection-names-case",
      "prettyName": "Collection names camel/snake case",
      "rationale": "Reads more fluently.",
    },
    "suggestion": "Change *my_flowerBed* to *myFlowerbed*.",
  },
  Object {
    "failure": "Collection name **** is not in snake case.",
    "hash": "M64da",
    "location": Object {},
    "options": Object {
      "case": "snake",
      "severity": "warning",
    },
    "ruleMetadata": Object {
      "description": "Make sure all collection names in the database have the right case.",
      "granularity": "CollectionName",
      "isFuzzy": false,
      "name": "collection-names-case",
      "prettyName": "Collection names camel/snake case",
      "rationale": "Reads more fluently.",
    },
    "suggestion": "Change ** to **.",
  },
  Object {
    "failure": "Collection name **_123** is not in snake case.",
    "hash": "Mb816",
    "location": Object {
      "collectionName": "_123",
    },
    "options": Object {
      "case": "snake",
      "severity": "warning",
    },
    "ruleMetadata": Object {
      "description": "Make sure all collection names in the database have the right case.",
      "granularity": "CollectionName",
      "isFuzzy": false,
      "name": "collection-names-case",
      "prettyName": "Collection names camel/snake case",
      "rationale": "Reads more fluently.",
    },
    "suggestion": "Change *_123* to *123*.",
  },
  Object {
    "failure": "Collection name **123** is not in snake case.",
    "hash": "Mc7fb",
    "location": Object {
      "collectionName": "123",
    },
    "options": Object {
      "case": "snake",
      "severity": "warning",
    },
    "ruleMetadata": Object {
      "description": "Make sure all collection names in the database have the right case.",
      "granularity": "CollectionName",
      "isFuzzy": false,
      "name": "collection-names-case",
      "prettyName": "Collection names camel/snake case",
      "rationale": "Reads more fluently.",
    },
    "suggestion": "Change *123* to *123*.",
  },
  Object {
    "failure": "Collection name **flowerBed** is not in snake case.",
    "hash": "M3274",
    "location": Object {
      "collectionName": "flowerBed",
    },
    "options": Object {
      "case": "snake",
      "severity": "warning",
    },
    "ruleMetadata": Object {
      "description": "Make sure all collection names in the database have the right case.",
      "granularity": "CollectionName",
      "isFuzzy": false,
      "name": "collection-names-case",
      "prettyName": "Collection names camel/snake case",
      "rationale": "Reads more fluently.",
    },
    "suggestion": "Change *flowerBed* to *flower_bed*.",
  },
  Object {
    "failure": "Collection name **my_flowerBed** is not in snake case.",
    "hash": "Mc26c",
    "location": Object {
      "collectionName": "my_flowerBed",
    },
    "options": Object {
      "case": "snake",
      "severity": "warning",
    },
    "ruleMetadata": Object {
      "description": "Make sure all collection names in the database have the right case.",
      "granularity": "CollectionName",
      "isFuzzy": false,
      "name": "collection-names-case",
      "prettyName": "Collection names camel/snake case",
      "rationale": "Reads more fluently.",
    },
    "suggestion": "Change *my_flowerBed* to *my_flowerbed*.",
  },
]
`;

exports[`collection-names-case.metadata 1`] = `
Object {
  "description": "Make sure all collection names in the database have the right case.",
  "granularity": 0,
  "isFuzzy": false,
  "name": "collection-names-case",
  "optionsDescription": "
      [case]
        description = \\"The case your collection names should be in.\\"
        type = \\"enum\\"
        possibleValues = \\"'camel' | 'snake'\\"
    ",
  "optionsSchema": Object {
    "case":  {
      "_description": null,
      "_examples": Array [],
      "_flags": Object {
        "presence": "required",
      },
      "_inner": Object {},
      "_invalids": Set {
        "_set": Array [],
      },
      "_meta": Array [],
      "_notes": Array [],
      "_refs": Array [],
      "_settings": null,
      "_tags": Array [],
      "_tests": Array [],
      "_type": "any",
      "_unit": null,
      "_valids": Set {
        "_set": Array [
          "camel",
          "snake",
        ],
      },
      "isJoi": true,
    },
  },
  "prettyName": "Collection names camel/snake case",
  "rationale": "Reads more fluently.",
}
`;

exports[`collection-names-number.failures 1`] = `
Array [
  RuleFailure {
    "options": Object {
      "collectionName": "cows",
    },
    "rule": Rule {
      "options": Object {
        "number": "singular",
        "severity": "warning",
      },
    },
  },
  RuleFailure {
    "options": Object {
      "collectionName": "flower_beds",
    },
    "rule": Rule {
      "options": Object {
        "number": "singular",
        "severity": "warning",
      },
    },
  },
  RuleFailure {
    "options": Object {
      "collectionName": "flowerBeds",
    },
    "rule": Rule {
      "options": Object {
        "number": "singular",
        "severity": "warning",
      },
    },
  },
  RuleFailure {
    "options": Object {
      "collectionName": "data",
    },
    "rule": Rule {
      "options": Object {
        "number": "singular",
        "severity": "warning",
      },
    },
  },
  RuleFailure {
    "options": Object {
      "collectionName": "",
    },
    "rule": Rule {
      "options": Object {
        "number": "plural",
        "severity": "warning",
      },
    },
  },
  RuleFailure {
    "options": Object {
      "collectionName": "123",
    },
    "rule": Rule {
      "options": Object {
        "number": "plural",
        "severity": "warning",
      },
    },
  },
  RuleFailure {
    "options": Object {
      "collectionName": "cow",
    },
    "rule": Rule {
      "options": Object {
        "number": "plural",
        "severity": "warning",
      },
    },
  },
  RuleFailure {
    "options": Object {
      "collectionName": "flower_bed",
    },
    "rule": Rule {
      "options": Object {
        "number": "plural",
        "severity": "warning",
      },
    },
  },
  RuleFailure {
    "options": Object {
      "collectionName": "flowerBed",
    },
    "rule": Rule {
      "options": Object {
        "number": "plural",
        "severity": "warning",
      },
    },
  },
  RuleFailure {
    "options": Object {
      "collectionName": "water",
    },
    "rule": Rule {
      "options": Object {
        "number": "plural",
        "severity": "warning",
      },
    },
  },
]
`;

exports[`collection-names-number.failuresJson 1`] = `
Array [
  Object {
    "failure": "Collection name **cows** is not singular.",
    "hash": "M5aad",
    "location": Object {
      "collectionName": "cows",
    },
    "options": Object {
      "number": "singular",
      "severity": "warning",
    },
    "ruleMetadata": Object {
      "description": "Make sure all collections in the database have names that are either singular or plural.",
      "granularity": "CollectionName",
      "isFuzzy": false,
      "name": "collection-names-number",
      "prettyName": "Collection names singular/plural",
      "rationale": "Reads more fluently.",
    },
    "suggestion": "Change *cows* to *cow*.",
  },
  Object {
    "failure": "Collection name **flower_beds** is not singular.",
    "hash": "Mdb1e",
    "location": Object {
      "collectionName": "flower_beds",
    },
    "options": Object {
      "number": "singular",
      "severity": "warning",
    },
    "ruleMetadata": Object {
      "description": "Make sure all collections in the database have names that are either singular or plural.",
      "granularity": "CollectionName",
      "isFuzzy": false,
      "name": "collection-names-number",
      "prettyName": "Collection names singular/plural",
      "rationale": "Reads more fluently.",
    },
    "suggestion": "Change *flower_beds* to *flower_bed*.",
  },
  Object {
    "failure": "Collection name **flowerBeds** is not singular.",
    "hash": "Meeba",
    "location": Object {
      "collectionName": "flowerBeds",
    },
    "options": Object {
      "number": "singular",
      "severity": "warning",
    },
    "ruleMetadata": Object {
      "description": "Make sure all collections in the database have names that are either singular or plural.",
      "granularity": "CollectionName",
      "isFuzzy": false,
      "name": "collection-names-number",
      "prettyName": "Collection names singular/plural",
      "rationale": "Reads more fluently.",
    },
    "suggestion": "Change *flowerBeds* to *flowerBed*.",
  },
  Object {
    "failure": "Collection name **data** is not singular.",
    "hash": "M0507",
    "location": Object {
      "collectionName": "data",
    },
    "options": Object {
      "number": "singular",
      "severity": "warning",
    },
    "ruleMetadata": Object {
      "description": "Make sure all collections in the database have names that are either singular or plural.",
      "granularity": "CollectionName",
      "isFuzzy": false,
      "name": "collection-names-number",
      "prettyName": "Collection names singular/plural",
      "rationale": "Reads more fluently.",
    },
    "suggestion": "Change *data* to *datum*.",
  },
  Object {
    "failure": "Collection name **** is not pluralized.",
    "hash": "Mb156",
    "location": Object {},
    "options": Object {
      "number": "plural",
      "severity": "warning",
    },
    "ruleMetadata": Object {
      "description": "Make sure all collections in the database have names that are either singular or plural.",
      "granularity": "CollectionName",
      "isFuzzy": false,
      "name": "collection-names-number",
      "prettyName": "Collection names singular/plural",
      "rationale": "Reads more fluently.",
    },
    "suggestion": "Change ** to *s*.",
  },
  Object {
    "failure": "Collection name **123** is not pluralized.",
    "hash": "M944a",
    "location": Object {
      "collectionName": "123",
    },
    "options": Object {
      "number": "plural",
      "severity": "warning",
    },
    "ruleMetadata": Object {
      "description": "Make sure all collections in the database have names that are either singular or plural.",
      "granularity": "CollectionName",
      "isFuzzy": false,
      "name": "collection-names-number",
      "prettyName": "Collection names singular/plural",
      "rationale": "Reads more fluently.",
    },
    "suggestion": "Change *123* to *123s*.",
  },
  Object {
    "failure": "Collection name **cow** is not pluralized.",
    "hash": "M3c58",
    "location": Object {
      "collectionName": "cow",
    },
    "options": Object {
      "number": "plural",
      "severity": "warning",
    },
    "ruleMetadata": Object {
      "description": "Make sure all collections in the database have names that are either singular or plural.",
      "granularity": "CollectionName",
      "isFuzzy": false,
      "name": "collection-names-number",
      "prettyName": "Collection names singular/plural",
      "rationale": "Reads more fluently.",
    },
    "suggestion": "Change *cow* to *cows*.",
  },
  Object {
    "failure": "Collection name **flower_bed** is not pluralized.",
    "hash": "M533a",
    "location": Object {
      "collectionName": "flower_bed",
    },
    "options": Object {
      "number": "plural",
      "severity": "warning",
    },
    "ruleMetadata": Object {
      "description": "Make sure all collections in the database have names that are either singular or plural.",
      "granularity": "CollectionName",
      "isFuzzy": false,
      "name": "collection-names-number",
      "prettyName": "Collection names singular/plural",
      "rationale": "Reads more fluently.",
    },
    "suggestion": "Change *flower_bed* to *flower_beds*.",
  },
  Object {
    "failure": "Collection name **flowerBed** is not pluralized.",
    "hash": "M2c4d",
    "location": Object {
      "collectionName": "flowerBed",
    },
    "options": Object {
      "number": "plural",
      "severity": "warning",
    },
    "ruleMetadata": Object {
      "description": "Make sure all collections in the database have names that are either singular or plural.",
      "granularity": "CollectionName",
      "isFuzzy": false,
      "name": "collection-names-number",
      "prettyName": "Collection names singular/plural",
      "rationale": "Reads more fluently.",
    },
    "suggestion": "Change *flowerBed* to *flowerBeds*.",
  },
  Object {
    "failure": "Collection name **water** is not pluralized.",
    "hash": "M99a5",
    "location": Object {
      "collectionName": "water",
    },
    "options": Object {
      "number": "plural",
      "severity": "warning",
    },
    "ruleMetadata": Object {
      "description": "Make sure all collections in the database have names that are either singular or plural.",
      "granularity": "CollectionName",
      "isFuzzy": false,
      "name": "collection-names-number",
      "prettyName": "Collection names singular/plural",
      "rationale": "Reads more fluently.",
    },
    "suggestion": "Change *water* to *waters*.",
  },
]
`;

exports[`collection-names-number.metadata 1`] = `
Object {
  "description": "Make sure all collections in the database have names that are either singular or plural.",
  "granularity": 0,
  "isFuzzy": false,
  "name": "collection-names-number",
  "optionsDescription": "
      [number]
        description = \\"The grammatical number that collection names should be checked for.\\"
        type = \\"enum\\"
        possibleValues = \\"'singular' | 'plural'\\"
    ",
  "optionsSchema": Object {
    "number":  {
      "_description": null,
      "_examples": Array [],
      "_flags": Object {
        "presence": "required",
      },
      "_inner": Object {},
      "_invalids": Set {
        "_set": Array [],
      },
      "_meta": Array [],
      "_notes": Array [],
      "_refs": Array [],
      "_settings": null,
      "_tags": Array [],
      "_tests": Array [],
      "_type": "any",
      "_unit": null,
      "_valids": Set {
        "_set": Array [
          "singular",
          "plural",
        ],
      },
      "isJoi": true,
    },
  },
  "prettyName": "Collection names singular/plural",
  "rationale": "Reads more fluently.",
}
`;

exports[`key-names-case.failures 1`] = `
Array [
  RuleFailure {
    "options": Object {
      "collectionName": "collection",
      "keyName": "_123",
    },
    "rule": Rule {
      "options": Object {
        "case": "camel",
        "severity": "warning",
      },
    },
  },
  RuleFailure {
    "options": Object {
      "collectionName": "collection",
      "keyName": "flower_bed",
    },
    "rule": Rule {
      "options": Object {
        "case": "camel",
        "severity": "warning",
      },
    },
  },
  RuleFailure {
    "options": Object {
      "collectionName": "collection",
      "keyName": "my_flowerBed",
    },
    "rule": Rule {
      "options": Object {
        "case": "camel",
        "severity": "warning",
      },
    },
  },
  RuleFailure {
    "options": Object {
      "collectionName": "collection",
      "keyName": "",
    },
    "rule": Rule {
      "options": Object {
        "case": "snake",
        "severity": "warning",
      },
    },
  },
  RuleFailure {
    "options": Object {
      "collectionName": "collection",
      "keyName": "_123",
    },
    "rule": Rule {
      "options": Object {
        "case": "snake",
        "severity": "warning",
      },
    },
  },
  RuleFailure {
    "options": Object {
      "collectionName": "collection",
      "keyName": "123",
    },
    "rule": Rule {
      "options": Object {
        "case": "snake",
        "severity": "warning",
      },
    },
  },
  RuleFailure {
    "options": Object {
      "collectionName": "collection",
      "keyName": "flowerBed",
    },
    "rule": Rule {
      "options": Object {
        "case": "snake",
        "severity": "warning",
      },
    },
  },
  RuleFailure {
    "options": Object {
      "collectionName": "collection",
      "keyName": "my_flowerBed",
    },
    "rule": Rule {
      "options": Object {
        "case": "snake",
        "severity": "warning",
      },
    },
  },
  RuleFailure {
    "options": Object {
      "collectionName": "collection",
      "keyName": "userID",
    },
    "rule": Rule {
      "options": Object {
        "case": "snake",
        "severity": "warning",
      },
    },
  },
]
`;

exports[`key-names-case.failuresJson 1`] = `
Array [
  Object {
    "failure": "Key name **collection._123** is not in camel case.",
    "hash": "Mfc2c",
    "location": Object {
      "collectionName": "collection",
      "keyName": "_123",
    },
    "options": Object {
      "case": "camel",
      "severity": "warning",
    },
    "ruleMetadata": Object {
      "description": "Make sure all keys in the database have the right case.",
      "granularity": "KeyName",
      "isFuzzy": false,
      "name": "key-names-case",
      "prettyName": "Key names singular/plural",
      "rationale": "Reads more fluently.",
    },
    "suggestion": "Change *collection._123* to *collection.123*.",
  },
  Object {
    "failure": "Key name **collection.flower_bed** is not in camel case.",
    "hash": "Mf928",
    "location": Object {
      "collectionName": "collection",
      "keyName": "flower_bed",
    },
    "options": Object {
      "case": "camel",
      "severity": "warning",
    },
    "ruleMetadata": Object {
      "description": "Make sure all keys in the database have the right case.",
      "granularity": "KeyName",
      "isFuzzy": false,
      "name": "key-names-case",
      "prettyName": "Key names singular/plural",
      "rationale": "Reads more fluently.",
    },
    "suggestion": "Change *collection.flower_bed* to *collection.flowerBed*.",
  },
  Object {
    "failure": "Key name **collection.my_flowerBed** is not in camel case.",
    "hash": "M2ab0",
    "location": Object {
      "collectionName": "collection",
      "keyName": "my_flowerBed",
    },
    "options": Object {
      "case": "camel",
      "severity": "warning",
    },
    "ruleMetadata": Object {
      "description": "Make sure all keys in the database have the right case.",
      "granularity": "KeyName",
      "isFuzzy": false,
      "name": "key-names-case",
      "prettyName": "Key names singular/plural",
      "rationale": "Reads more fluently.",
    },
    "suggestion": "Change *collection.my_flowerBed* to *collection.myFlowerbed*.",
  },
  Object {
    "failure": "Key name **collection.** is not in snake case.",
    "hash": "Mff04",
    "location": Object {
      "collectionName": "collection",
    },
    "options": Object {
      "case": "snake",
      "severity": "warning",
    },
    "ruleMetadata": Object {
      "description": "Make sure all keys in the database have the right case.",
      "granularity": "KeyName",
      "isFuzzy": false,
      "name": "key-names-case",
      "prettyName": "Key names singular/plural",
      "rationale": "Reads more fluently.",
    },
    "suggestion": "Change *collection.* to *collection.*.",
  },
  Object {
    "failure": "Key name **collection._123** is not in snake case.",
    "hash": "Mfc2c",
    "location": Object {
      "collectionName": "collection",
      "keyName": "_123",
    },
    "options": Object {
      "case": "snake",
      "severity": "warning",
    },
    "ruleMetadata": Object {
      "description": "Make sure all keys in the database have the right case.",
      "granularity": "KeyName",
      "isFuzzy": false,
      "name": "key-names-case",
      "prettyName": "Key names singular/plural",
      "rationale": "Reads more fluently.",
    },
    "suggestion": "Change *collection._123* to *collection.123*.",
  },
  Object {
    "failure": "Key name **collection.123** is not in snake case.",
    "hash": "M9371",
    "location": Object {
      "collectionName": "collection",
      "keyName": "123",
    },
    "options": Object {
      "case": "snake",
      "severity": "warning",
    },
    "ruleMetadata": Object {
      "description": "Make sure all keys in the database have the right case.",
      "granularity": "KeyName",
      "isFuzzy": false,
      "name": "key-names-case",
      "prettyName": "Key names singular/plural",
      "rationale": "Reads more fluently.",
    },
    "suggestion": "Change *collection.123* to *collection.123*.",
  },
  Object {
    "failure": "Key name **collection.flowerBed** is not in snake case.",
    "hash": "M0740",
    "location": Object {
      "collectionName": "collection",
      "keyName": "flowerBed",
    },
    "options": Object {
      "case": "snake",
      "severity": "warning",
    },
    "ruleMetadata": Object {
      "description": "Make sure all keys in the database have the right case.",
      "granularity": "KeyName",
      "isFuzzy": false,
      "name": "key-names-case",
      "prettyName": "Key names singular/plural",
      "rationale": "Reads more fluently.",
    },
    "suggestion": "Change *collection.flowerBed* to *collection.flower_bed*.",
  },
  Object {
    "failure": "Key name **collection.my_flowerBed** is not in snake case.",
    "hash": "M2ab0",
    "location": Object {
      "collectionName": "collection",
      "keyName": "my_flowerBed",
    },
    "options": Object {
      "case": "snake",
      "severity": "warning",
    },
    "ruleMetadata": Object {
      "description": "Make sure all keys in the database have the right case.",
      "granularity": "KeyName",
      "isFuzzy": false,
      "name": "key-names-case",
      "prettyName": "Key names singular/plural",
      "rationale": "Reads more fluently.",
    },
    "suggestion": "Change *collection.my_flowerBed* to *collection.my_flowerbed*.",
  },
  Object {
    "failure": "Key name **collection.userID** is not in snake case.",
    "hash": "M646e",
    "location": Object {
      "collectionName": "collection",
      "keyName": "userID",
    },
    "options": Object {
      "case": "snake",
      "severity": "warning",
    },
    "ruleMetadata": Object {
      "description": "Make sure all keys in the database have the right case.",
      "granularity": "KeyName",
      "isFuzzy": false,
      "name": "key-names-case",
      "prettyName": "Key names singular/plural",
      "rationale": "Reads more fluently.",
    },
    "suggestion": "Change *collection.userID* to *collection.user_i_d*.",
  },
]
`;

exports[`key-names-case.metadata 1`] = `
Object {
  "description": "Make sure all keys in the database have the right case.",
  "granularity": 2,
  "isFuzzy": false,
  "name": "key-names-case",
  "optionsDescription": "
      [case]
        description = \\"The case your keys should be in.\\"
        type = \\"enum\\"
        possibleValues = \\"'camel' | 'snake'\\"
    ",
  "optionsSchema": Object {
    "case":  {
      "_description": null,
      "_examples": Array [],
      "_flags": Object {
        "presence": "required",
      },
      "_inner": Object {},
      "_invalids": Set {
        "_set": Array [],
      },
      "_meta": Array [],
      "_notes": Array [],
      "_refs": Array [],
      "_settings": null,
      "_tags": Array [],
      "_tests": Array [],
      "_type": "any",
      "_unit": null,
      "_valids": Set {
        "_set": Array [
          "camel",
          "snake",
        ],
      },
      "isJoi": true,
    },
  },
  "prettyName": "Key names singular/plural",
  "rationale": "Reads more fluently.",
}
`;

exports[`keys-that-end-in-at-should-refer-to-dates.failures 1`] = `
Array [
  RuleFailure {
    "options": Object {
      "collectionName": "collection",
      "keyName": "arstAt",
    },
    "rule": Rule {
      "options": Object {
        "allow-stringified-days": false,
        "severity": "warning",
        "stringified-days-regex": "**",
      },
    },
  },
  RuleFailure {
    "options": Object {
      "collectionName": "collection",
      "keyName": "At",
    },
    "rule": Rule {
      "options": Object {
        "allow-stringified-days": false,
        "severity": "warning",
        "stringified-days-regex": "**",
      },
    },
  },
  RuleFailure {
    "options": Object {
      "collectionName": "collection",
      "keyName": "arstAt",
    },
    "rule": Rule {
      "options": Object {
        "allow-stringified-days": true,
        "severity": "warning",
        "stringified-days-regex": "^\\\\d\\\\d\\\\d\\\\d-[01]\\\\d-[0123]\\\\d$",
      },
    },
  },
  RuleFailure {
    "options": Object {
      "collectionName": "collection",
      "keyName": "At",
    },
    "rule": Rule {
      "options": Object {
        "allow-stringified-days": true,
        "severity": "warning",
        "stringified-days-regex": "^\\\\d\\\\d\\\\d\\\\d-[01]\\\\d-[0123]\\\\d$",
      },
    },
  },
  RuleFailure {
    "options": Object {
      "collectionName": "collection",
      "keyName": "arstAt",
    },
    "rule": Rule {
      "options": Object {
        "allow-stringified-days": true,
        "severity": "warning",
        "stringified-days-regex": "FOOBAR",
      },
    },
  },
  RuleFailure {
    "options": Object {
      "collectionName": "collection",
      "keyName": "At",
    },
    "rule": Rule {
      "options": Object {
        "allow-stringified-days": true,
        "severity": "warning",
        "stringified-days-regex": "FOOBAR",
      },
    },
  },
]
`;

exports[`keys-that-end-in-at-should-refer-to-dates.failuresJson 1`] = `
Array [
  Object {
    "failure": "Column **collection.arstAt** ends in \\"At\\" but contains values that are not dates, null or undefined.",
    "hash": "M7408",
    "location": Object {
      "collectionName": "collection",
      "keyName": "arstAt",
    },
    "mongoCommand": "db.getCollection('collection').find({\\"$nor\\":[{\\"arstAt\\":{\\"$type\\":9}},{\\"arstAt\\":{\\"$type\\":10}},{\\"arstAt\\":{\\"$exists\\":false}}]}, {arstAt: 1})",
    "options": Object {
      "allow-stringified-days": false,
      "severity": "warning",
      "stringified-days-regex": "**",
    },
    "ruleMetadata": Object {
      "description": "Make sure columns with keys that end in ...At contain nothing but dates.",
      "granularity": "Column",
      "isFuzzy": false,
      "name": "keys-that-end-in-at-should-refer-to-dates",
      "prettyName": "Keys that end in At should refer to dates",
      "rationale": "It's what people expect when they see names like updatedAt.",
    },
  },
  Object {
    "failure": "Column **collection.At** ends in \\"At\\" but contains values that are not dates, null or undefined.",
    "hash": "M2a33",
    "location": Object {
      "collectionName": "collection",
      "keyName": "At",
    },
    "mongoCommand": "db.getCollection('collection').find({\\"$nor\\":[{\\"At\\":{\\"$type\\":9}},{\\"At\\":{\\"$type\\":10}},{\\"At\\":{\\"$exists\\":false}}]}, {At: 1})",
    "options": Object {
      "allow-stringified-days": false,
      "severity": "warning",
      "stringified-days-regex": "**",
    },
    "ruleMetadata": Object {
      "description": "Make sure columns with keys that end in ...At contain nothing but dates.",
      "granularity": "Column",
      "isFuzzy": false,
      "name": "keys-that-end-in-at-should-refer-to-dates",
      "prettyName": "Keys that end in At should refer to dates",
      "rationale": "It's what people expect when they see names like updatedAt.",
    },
  },
  Object {
    "failure": "Column **collection.arstAt** ends in \\"At\\" but contains values that are not dates, null, undefined or satisfying the provided regexp.",
    "hash": "M7408",
    "location": Object {
      "collectionName": "collection",
      "keyName": "arstAt",
    },
    "mongoCommand": "db.getCollection('collection').find({\\"$nor\\":[{\\"arstAt\\":{\\"$type\\":9}},{\\"arstAt\\":{\\"$type\\":10}},{\\"arstAt\\":{\\"$exists\\":false}},{\\"arstAt\\":{\\"$regex\\":/^\\\\d\\\\d\\\\d\\\\d-[01]\\\\d-[0123]\\\\d$/}}]}, {arstAt: 1})",
    "options": Object {
      "allow-stringified-days": true,
      "severity": "warning",
      "stringified-days-regex": "^\\\\d\\\\d\\\\d\\\\d-[01]\\\\d-[0123]\\\\d$",
    },
    "ruleMetadata": Object {
      "description": "Make sure columns with keys that end in ...At contain nothing but dates.",
      "granularity": "Column",
      "isFuzzy": false,
      "name": "keys-that-end-in-at-should-refer-to-dates",
      "prettyName": "Keys that end in At should refer to dates",
      "rationale": "It's what people expect when they see names like updatedAt.",
    },
  },
  Object {
    "failure": "Column **collection.At** ends in \\"At\\" but contains values that are not dates, null, undefined or satisfying the provided regexp.",
    "hash": "M2a33",
    "location": Object {
      "collectionName": "collection",
      "keyName": "At",
    },
    "mongoCommand": "db.getCollection('collection').find({\\"$nor\\":[{\\"At\\":{\\"$type\\":9}},{\\"At\\":{\\"$type\\":10}},{\\"At\\":{\\"$exists\\":false}},{\\"At\\":{\\"$regex\\":/^\\\\d\\\\d\\\\d\\\\d-[01]\\\\d-[0123]\\\\d$/}}]}, {At: 1})",
    "options": Object {
      "allow-stringified-days": true,
      "severity": "warning",
      "stringified-days-regex": "^\\\\d\\\\d\\\\d\\\\d-[01]\\\\d-[0123]\\\\d$",
    },
    "ruleMetadata": Object {
      "description": "Make sure columns with keys that end in ...At contain nothing but dates.",
      "granularity": "Column",
      "isFuzzy": false,
      "name": "keys-that-end-in-at-should-refer-to-dates",
      "prettyName": "Keys that end in At should refer to dates",
      "rationale": "It's what people expect when they see names like updatedAt.",
    },
  },
  Object {
    "failure": "Column **collection.arstAt** ends in \\"At\\" but contains values that are not dates, null, undefined or satisfying the provided regexp.",
    "hash": "M7408",
    "location": Object {
      "collectionName": "collection",
      "keyName": "arstAt",
    },
    "mongoCommand": "db.getCollection('collection').find({\\"$nor\\":[{\\"arstAt\\":{\\"$type\\":9}},{\\"arstAt\\":{\\"$type\\":10}},{\\"arstAt\\":{\\"$exists\\":false}},{\\"arstAt\\":{\\"$regex\\":/FOOBAR/}}]}, {arstAt: 1})",
    "options": Object {
      "allow-stringified-days": true,
      "severity": "warning",
      "stringified-days-regex": "FOOBAR",
    },
    "ruleMetadata": Object {
      "description": "Make sure columns with keys that end in ...At contain nothing but dates.",
      "granularity": "Column",
      "isFuzzy": false,
      "name": "keys-that-end-in-at-should-refer-to-dates",
      "prettyName": "Keys that end in At should refer to dates",
      "rationale": "It's what people expect when they see names like updatedAt.",
    },
  },
  Object {
    "failure": "Column **collection.At** ends in \\"At\\" but contains values that are not dates, null, undefined or satisfying the provided regexp.",
    "hash": "M2a33",
    "location": Object {
      "collectionName": "collection",
      "keyName": "At",
    },
    "mongoCommand": "db.getCollection('collection').find({\\"$nor\\":[{\\"At\\":{\\"$type\\":9}},{\\"At\\":{\\"$type\\":10}},{\\"At\\":{\\"$exists\\":false}},{\\"At\\":{\\"$regex\\":/FOOBAR/}}]}, {At: 1})",
    "options": Object {
      "allow-stringified-days": true,
      "severity": "warning",
      "stringified-days-regex": "FOOBAR",
    },
    "ruleMetadata": Object {
      "description": "Make sure columns with keys that end in ...At contain nothing but dates.",
      "granularity": "Column",
      "isFuzzy": false,
      "name": "keys-that-end-in-at-should-refer-to-dates",
      "prettyName": "Keys that end in At should refer to dates",
      "rationale": "It's what people expect when they see names like updatedAt.",
    },
  },
]
`;

exports[`keys-that-end-in-at-should-refer-to-dates.metadata 1`] = `
Object {
  "description": "Make sure columns with keys that end in ...At contain nothing but dates.",
  "granularity": 3,
  "isFuzzy": false,
  "name": "keys-that-end-in-at-should-refer-to-dates",
  "optionsDescription": "
      [allow-stringified-days]
        description = \\"Whether to allow dates that are saved as strings.\\"
        type = \\"boolean\\"
      [stringified-days-regex]
        description = \\"The regexp used to determine whether a string contains a date.\\"
        type = \\"regexp\\"
    ",
  "optionsSchema": Object {
    "allow-stringified-days":  {
      "_description": null,
      "_examples": Array [],
      "_flags": Object {
        "insensitive": true,
        "presence": "required",
      },
      "_inner": Object {
        "falsySet": Set {
          "_set": Array [],
        },
        "truthySet": Set {
          "_set": Array [],
        },
      },
      "_invalids": Set {
        "_set": Array [],
      },
      "_meta": Array [],
      "_notes": Array [],
      "_refs": Array [],
      "_settings": null,
      "_tags": Array [],
      "_tests": Array [],
      "_type": "boolean",
      "_unit": null,
      "_valids": Set {
        "_set": Array [],
      },
      "isJoi": true,
    },
    "stringified-days-regex":  {
      "_description": null,
      "_examples": Array [],
      "_flags": Object {
        "presence": "required",
      },
      "_inner": Object {},
      "_invalids": Set {
        "_set": Array [
          "",
        ],
      },
      "_meta": Array [],
      "_notes": Array [],
      "_refs": Array [],
      "_settings": null,
      "_tags": Array [],
      "_tests": Array [],
      "_type": "string",
      "_unit": null,
      "_valids": Set {
        "_set": Array [],
      },
      "isJoi": true,
    },
  },
  "prettyName": "Keys that end in At should refer to dates",
  "rationale": "It's what people expect when they see names like updatedAt.",
}
`;

exports[`max-key-count.failures 1`] = `
Array [
  RuleFailure {
    "options": Object {
      "additionalDetails": Object {
        "actualKeyCount": 12,
      },
      "collectionName": "collection2",
    },
    "rule": Rule {
      "options": Object {
        "maximum-excluding-_id": 2,
        "severity": "warning",
      },
    },
  },
  RuleFailure {
    "options": Object {
      "additionalDetails": Object {
        "actualKeyCount": 12,
      },
      "collectionName": "collection2",
    },
    "rule": Rule {
      "options": Object {
        "maximum-excluding-_id": 5,
        "severity": "warning",
      },
    },
  },
]
`;

exports[`max-key-count.failuresJson 1`] = `
Array [
  Object {
    "failure": "Collection **collection2** has 12 keys which exceeds the allowed maximum of 2",
    "hash": "Md1aa",
    "location": Object {
      "collectionName": "collection2",
    },
    "options": Object {
      "maximum-excluding-_id": 2,
      "severity": "warning",
    },
    "ruleMetadata": Object {
      "description": "Enforces a maximum number of keys per collection.",
      "granularity": "AllKeyNames",
      "isFuzzy": false,
      "name": "max-key-count",
      "prettyName": "Max key count",
      "rationale": "Hierarchical objects are more readable and faster to scan without index.",
    },
  },
  Object {
    "failure": "Collection **collection2** has 12 keys which exceeds the allowed maximum of 5",
    "hash": "Md1aa",
    "location": Object {
      "collectionName": "collection2",
    },
    "options": Object {
      "maximum-excluding-_id": 5,
      "severity": "warning",
    },
    "ruleMetadata": Object {
      "description": "Enforces a maximum number of keys per collection.",
      "granularity": "AllKeyNames",
      "isFuzzy": false,
      "name": "max-key-count",
      "prettyName": "Max key count",
      "rationale": "Hierarchical objects are more readable and faster to scan without index.",
    },
  },
]
`;

exports[`max-key-count.metadata 1`] = `
Object {
  "description": "Enforces a maximum number of keys per collection.",
  "granularity": 1,
  "isFuzzy": false,
  "name": "max-key-count",
  "optionsDescription": "
      [maximum-excluding-_id]
        description = \\"The maximum number of keys allowed.\\"
        type = \\"number\\"
    ",
  "optionsSchema": Object {
    "maximum-excluding-_id":  {
      "_description": null,
      "_examples": Array [],
      "_flags": Object {
        "presence": "required",
      },
      "_inner": Object {},
      "_invalids": Set {
        "_set": Array [
          Infinity,
          -Infinity,
        ],
      },
      "_meta": Array [],
      "_notes": Array [],
      "_refs": Array [],
      "_settings": null,
      "_tags": Array [],
      "_tests": Array [
        Object {
          "arg": undefined,
          "func": [Function],
          "name": "integer",
          "options": undefined,
        },
        Object {
          "arg": 2,
          "func": [Function],
          "name": "min",
          "options": undefined,
        },
      ],
      "_type": "number",
      "_unit": null,
      "_valids": Set {
        "_set": Array [],
      },
      "isJoi": true,
    },
  },
  "prettyName": "Max key count",
  "rationale": "Hierarchical objects are more readable and faster to scan without index.",
}
`;

exports[`no-bad-key-names.failures 1`] = `
Array [
  RuleFailure {
    "options": Object {
      "collectionName": "collection2",
      "keyName": "stuff",
    },
    "rule": Rule {
      "options": Object {
        "names-considered-bad": Array [
          "stuff",
          "data",
        ],
        "severity": "warning",
      },
    },
  },
  RuleFailure {
    "options": Object {
      "collectionName": "collection2",
      "keyName": "data",
    },
    "rule": Rule {
      "options": Object {
        "names-considered-bad": Array [
          "stuff",
          "data",
        ],
        "severity": "warning",
      },
    },
  },
]
`;

exports[`no-bad-key-names.failuresJson 1`] = `
Array [
  Object {
    "failure": "Collection collection2 contains a column named **stuff** which is not a good name.",
    "hash": "M8990",
    "location": Object {
      "collectionName": "collection2",
      "keyName": "stuff",
    },
    "options": Object {
      "names-considered-bad": Array [
        "stuff",
        "data",
      ],
      "severity": "warning",
    },
    "ruleMetadata": Object {
      "description": "Make sure no common bad key names are used.",
      "granularity": "KeyName",
      "isFuzzy": false,
      "name": "no-bad-key-names",
      "prettyName": "No bad key names",
      "rationale": "Bad key names don't give you any information about what's saved in the column.",
    },
  },
  Object {
    "failure": "Collection collection2 contains a column named **data** which is not a good name.",
    "hash": "M0e5c",
    "location": Object {
      "collectionName": "collection2",
      "keyName": "data",
    },
    "options": Object {
      "names-considered-bad": Array [
        "stuff",
        "data",
      ],
      "severity": "warning",
    },
    "ruleMetadata": Object {
      "description": "Make sure no common bad key names are used.",
      "granularity": "KeyName",
      "isFuzzy": false,
      "name": "no-bad-key-names",
      "prettyName": "No bad key names",
      "rationale": "Bad key names don't give you any information about what's saved in the column.",
    },
  },
]
`;

exports[`no-bad-key-names.metadata 1`] = `
Object {
  "description": "Make sure no common bad key names are used.",
  "granularity": 2,
  "isFuzzy": false,
  "name": "no-bad-key-names",
  "optionsDescription": "
      [names-considered-bad]
        description = \\"Key names that should be avoided.\\"
        type = \\"string[]\\"
    ",
  "optionsSchema": Object {
    "names-considered-bad":  {
      "_description": null,
      "_examples": Array [],
      "_flags": Object {
        "presence": "required",
        "sparse": false,
      },
      "_inner": Object {
        "exclusions": Array [],
        "inclusions": Array [
           {
            "_description": null,
            "_examples": Array [],
            "_flags": Object {},
            "_inner": Object {},
            "_invalids": Set {
              "_set": Array [
                "",
              ],
            },
            "_meta": Array [],
            "_notes": Array [],
            "_refs": Array [],
            "_settings": null,
            "_tags": Array [],
            "_tests": Array [
              Object {
                "arg": undefined,
                "func": [Function],
                "name": "alphanum",
                "options": undefined,
              },
              Object {
                "arg": 1,
                "func": [Function],
                "name": "min",
                "options": undefined,
              },
            ],
            "_type": "string",
            "_unit": null,
            "_valids": Set {
              "_set": Array [],
            },
            "isJoi": true,
          },
        ],
        "items": Array [
           {
            "_description": null,
            "_examples": Array [],
            "_flags": Object {},
            "_inner": Object {},
            "_invalids": Set {
              "_set": Array [
                "",
              ],
            },
            "_meta": Array [],
            "_notes": Array [],
            "_refs": Array [],
            "_settings": null,
            "_tags": Array [],
            "_tests": Array [
              Object {
                "arg": undefined,
                "func": [Function],
                "name": "alphanum",
                "options": undefined,
              },
              Object {
                "arg": 1,
                "func": [Function],
                "name": "min",
                "options": undefined,
              },
            ],
            "_type": "string",
            "_unit": null,
            "_valids": Set {
              "_set": Array [],
            },
            "isJoi": true,
          },
        ],
        "ordereds": Array [],
        "requireds": Array [],
      },
      "_invalids": Set {
        "_set": Array [],
      },
      "_meta": Array [],
      "_notes": Array [],
      "_refs": Array [],
      "_settings": null,
      "_tags": Array [],
      "_tests": Array [
        Object {
          "arg": 1,
          "func": [Function],
          "name": "min",
          "options": undefined,
        },
        Object {
          "arg": Object {},
          "func": [Function],
          "name": "unique",
          "options": undefined,
        },
      ],
      "_type": "array",
      "_unit": null,
      "_valids": Set {
        "_set": Array [],
      },
      "isJoi": true,
    },
  },
  "prettyName": "No bad key names",
  "rationale": "Bad key names don't give you any information about what's saved in the column.",
}
`;

exports[`no-leading-underscores-in-key-names.failures 1`] = `
Array [
  RuleFailure {
    "options": Object {
      "collectionName": "collection1",
      "keyName": "_",
    },
    "rule": Rule {
      "options": Object {
        "severity": "warning",
      },
    },
  },
  RuleFailure {
    "options": Object {
      "collectionName": "collection1",
      "keyName": "_arst",
    },
    "rule": Rule {
      "options": Object {
        "severity": "warning",
      },
    },
  },
  RuleFailure {
    "options": Object {
      "collectionName": "collection1",
      "keyName": "__v",
    },
    "rule": Rule {
      "options": Object {
        "severity": "warning",
      },
    },
  },
]
`;

exports[`no-leading-underscores-in-key-names.failuresJson 1`] = `
Array [
  Object {
    "failure": "Key name **collection1._** should not start with an underscore.",
    "hash": "Md7d2",
    "location": Object {
      "collectionName": "collection1",
      "keyName": "_",
    },
    "options": Object {
      "severity": "warning",
    },
    "ruleMetadata": Object {
      "description": "Make sure no key name except _id starts with an underscore.",
      "granularity": "KeyName",
      "isFuzzy": false,
      "name": "no-leading-underscores-in-key-names",
      "prettyName": "No leading underscores in key names",
      "rationale": "It suggests the data is used internally.",
    },
  },
  Object {
    "failure": "Key name **collection1._arst** should not start with an underscore.",
    "hash": "Md2ba",
    "location": Object {
      "collectionName": "collection1",
      "keyName": "_arst",
    },
    "options": Object {
      "severity": "warning",
    },
    "ruleMetadata": Object {
      "description": "Make sure no key name except _id starts with an underscore.",
      "granularity": "KeyName",
      "isFuzzy": false,
      "name": "no-leading-underscores-in-key-names",
      "prettyName": "No leading underscores in key names",
      "rationale": "It suggests the data is used internally.",
    },
  },
  Object {
    "failure": "Key name **collection1.__v** should not start with an underscore.",
    "hash": "Ma3ee",
    "location": Object {
      "collectionName": "collection1",
      "keyName": "__v",
    },
    "options": Object {
      "severity": "warning",
    },
    "ruleMetadata": Object {
      "description": "Make sure no key name except _id starts with an underscore.",
      "granularity": "KeyName",
      "isFuzzy": false,
      "name": "no-leading-underscores-in-key-names",
      "prettyName": "No leading underscores in key names",
      "rationale": "It suggests the data is used internally.",
    },
    "suggestion": "Configure mongoose so it doesn't create a __v key.",
  },
]
`;

exports[`no-leading-underscores-in-key-names.metadata 1`] = `
Object {
  "description": "Make sure no key name except _id starts with an underscore.",
  "granularity": 2,
  "isFuzzy": false,
  "name": "no-leading-underscores-in-key-names",
  "optionsDescription": "",
  "optionsSchema": Object {},
  "prettyName": "No leading underscores in key names",
  "rationale": "It suggests the data is used internally.",
}
`;

exports[`no-null.failures 1`] = `
Array [
  RuleFailure {
    "options": Object {
      "collectionName": "collection1",
      "keyName": "_",
    },
    "rule": Rule {
      "options": Object {
        "severity": "warning",
      },
    },
  },
  RuleFailure {
    "options": Object {
      "collectionName": "collection1",
      "keyName": "_arst",
    },
    "rule": Rule {
      "options": Object {
        "severity": "warning",
      },
    },
  },
]
`;

exports[`no-null.failuresJson 1`] = `
Array [
  Object {
    "failure": "Column **collection1._** contains null values.",
    "hash": "Mdc6f",
    "location": Object {
      "collectionName": "collection1",
      "keyName": "_",
    },
    "mongoCommand": "db.getCollection('collection1').find({\\"_\\":{\\"$type\\":10}},{_:1})",
    "options": Object {
      "severity": "warning",
    },
    "ruleMetadata": Object {
      "description": "Make sure columns do not contain null values.",
      "granularity": "Column",
      "isFuzzy": false,
      "name": "no-null",
      "prettyName": "No null",
      "rationale": "Some columns should not be nullable.",
    },
  },
  Object {
    "failure": "Column **collection1._arst** contains null values.",
    "hash": "Mbfbf",
    "location": Object {
      "collectionName": "collection1",
      "keyName": "_arst",
    },
    "mongoCommand": "db.getCollection('collection1').find({\\"_arst\\":{\\"$type\\":10}},{_arst:1})",
    "options": Object {
      "severity": "warning",
    },
    "ruleMetadata": Object {
      "description": "Make sure columns do not contain null values.",
      "granularity": "Column",
      "isFuzzy": false,
      "name": "no-null",
      "prettyName": "No null",
      "rationale": "Some columns should not be nullable.",
    },
  },
]
`;

exports[`no-null.metadata 1`] = `
Object {
  "description": "Make sure columns do not contain null values.",
  "granularity": 3,
  "isFuzzy": false,
  "name": "no-null",
  "optionsDescription": "",
  "optionsSchema": Object {},
  "prettyName": "No null",
  "rationale": "Some columns should not be nullable.",
}
`;

exports[`no-numbers-saved-as-string.failures 1`] = `
Array [
  RuleFailure {
    "options": Object {
      "collectionName": "collection",
      "keyName": "key1",
    },
    "rule": Rule {
      "options": Object {
        "severity": "warning",
        "strict-number-check": false,
      },
    },
  },
  RuleFailure {
    "options": Object {
      "collectionName": "collection",
      "keyName": "key1",
    },
    "rule": Rule {
      "options": Object {
        "severity": "warning",
        "strict-number-check": true,
      },
    },
  },
]
`;

exports[`no-numbers-saved-as-string.failuresJson 1`] = `
Array [
  Object {
    "failure": "Column **collection.key1** contains numbers that are saved as strings.",
    "hash": "M5282",
    "location": Object {
      "collectionName": "collection",
      "keyName": "key1",
    },
    "mongoCommand": "db.getCollection('collection').find({key1: {$type: 2, $regex: new RegExp('^(0x|0b|-)?\\\\\\\\d+\\\\\\\\.?\\\\\\\\d*$')}}, {key1: 1})",
    "options": Object {
      "severity": "warning",
      "strict-number-check": false,
    },
    "ruleMetadata": Object {
      "description": "Makes sure numbers don't get saved as strings.",
      "granularity": "Column",
      "isFuzzy": false,
      "name": "no-numbers-saved-as-string",
      "prettyName": "No numbers saved as string",
      "rationale": "It breaks expectations and is easy to overlook.",
    },
  },
  Object {
    "failure": "Column **collection.key1** contains numbers that are saved as strings.",
    "hash": "M5282",
    "location": Object {
      "collectionName": "collection",
      "keyName": "key1",
    },
    "mongoCommand": "db.getCollection('collection').find({key1: {$type: 2, $regex: new RegExp('^-?[1-9]\\\\\\\\d*\\\\\\\\.?(\\\\\\\\d*[1-9])?$')}}, {key1: 1})",
    "options": Object {
      "severity": "warning",
      "strict-number-check": true,
    },
    "ruleMetadata": Object {
      "description": "Makes sure numbers don't get saved as strings.",
      "granularity": "Column",
      "isFuzzy": false,
      "name": "no-numbers-saved-as-string",
      "prettyName": "No numbers saved as string",
      "rationale": "It breaks expectations and is easy to overlook.",
    },
  },
]
`;

exports[`no-numbers-saved-as-string.metadata 1`] = `
Object {
  "description": "Makes sure numbers don't get saved as strings.",
  "granularity": 3,
  "isFuzzy": false,
  "name": "no-numbers-saved-as-string",
  "optionsDescription": "
      [strict-number-check]
        description = \\"When this is set to true, strings like '015', '0xF' or '0b1111 are not considered to be numbers.\\"
        type = \\"boolean\\"
    ",
  "optionsSchema": Object {
    "strict-number-check":  {
      "_description": null,
      "_examples": Array [],
      "_flags": Object {
        "insensitive": true,
        "presence": "required",
      },
      "_inner": Object {
        "falsySet": Set {
          "_set": Array [],
        },
        "truthySet": Set {
          "_set": Array [],
        },
      },
      "_invalids": Set {
        "_set": Array [],
      },
      "_meta": Array [],
      "_notes": Array [],
      "_refs": Array [],
      "_settings": null,
      "_tags": Array [],
      "_tests": Array [],
      "_type": "boolean",
      "_unit": null,
      "_valids": Set {
        "_set": Array [],
      },
      "isJoi": true,
    },
  },
  "prettyName": "No numbers saved as string",
  "rationale": "It breaks expectations and is easy to overlook.",
}
`;

exports[`no-undefined.failures 1`] = `
Array [
  RuleFailure {
    "options": Object {
      "collectionName": "collection1",
      "keyName": "_",
    },
    "rule": Rule {
      "options": Object {
        "severity": "warning",
      },
    },
  },
  RuleFailure {
    "options": Object {
      "collectionName": "collection1",
      "keyName": "_arst",
    },
    "rule": Rule {
      "options": Object {
        "severity": "warning",
      },
    },
  },
]
`;

exports[`no-undefined.failuresJson 1`] = `
Array [
  Object {
    "failure": "Column **collection1._** contains undefined values.",
    "hash": "M3e04",
    "location": Object {
      "collectionName": "collection1",
      "keyName": "_",
    },
    "mongoCommand": "db.getCollection('collection1').find({\\"_\\":{\\"$exists\\":false}})",
    "options": Object {
      "severity": "warning",
    },
    "ruleMetadata": Object {
      "description": "Make sure columns do not contain undefined values.",
      "granularity": "Column",
      "isFuzzy": false,
      "name": "no-undefined",
      "prettyName": "No undefined",
      "rationale": "It's efficient because the record doesn't have to grow later.",
    },
  },
  Object {
    "failure": "Column **collection1._arst** contains undefined values.",
    "hash": "M4c80",
    "location": Object {
      "collectionName": "collection1",
      "keyName": "_arst",
    },
    "mongoCommand": "db.getCollection('collection1').find({\\"_arst\\":{\\"$exists\\":false}})",
    "options": Object {
      "severity": "warning",
    },
    "ruleMetadata": Object {
      "description": "Make sure columns do not contain undefined values.",
      "granularity": "Column",
      "isFuzzy": false,
      "name": "no-undefined",
      "prettyName": "No undefined",
      "rationale": "It's efficient because the record doesn't have to grow later.",
    },
  },
]
`;

exports[`no-undefined.metadata 1`] = `
Object {
  "description": "Make sure columns do not contain undefined values.",
  "granularity": 3,
  "isFuzzy": false,
  "name": "no-undefined",
  "optionsDescription": "",
  "optionsSchema": Object {},
  "prettyName": "No undefined",
  "rationale": "It's efficient because the record doesn't have to grow later.",
}
`;

exports[`question-keys-should-refer-to-booleans.failures 1`] = `
Array [
  RuleFailure {
    "options": Object {
      "collectionName": "collection",
      "keyName": "isQwfp",
    },
    "rule": Rule {
      "options": Object {
        "boolean-key-prefixes": Array [
          "is",
          "does",
        ],
        "severity": "warning",
      },
    },
  },
]
`;

exports[`question-keys-should-refer-to-booleans.failuresJson 1`] = `
Array [
  Object {
    "failure": "Column **collection.isQwfp** starts with \\"is\\" but contains values that are not booleans, null or undefined",
    "hash": "M87c8",
    "location": Object {
      "collectionName": "collection",
      "keyName": "isQwfp",
    },
    "mongoCommand": "db.getCollection('collection').find({\\"$nor\\":[{\\"isQwfp\\":{\\"$type\\":8}},{\\"isQwfp\\":{\\"$type\\":10}},{\\"isQwfp\\":{\\"$exists\\":false}}]}, {isQwfp: 1})",
    "options": Object {
      "boolean-key-prefixes": Array [
        "is",
        "does",
      ],
      "severity": "warning",
    },
    "ruleMetadata": Object {
      "description": "Make sure columns with keys that start with verbs like \\"is\\" or \\"has\\" contain nothing but booleans.",
      "granularity": "Column",
      "isFuzzy": false,
      "name": "question-keys-should-refer-to-booleans",
      "prettyName": "Question keys should refer to booleans",
      "rationale": "It's what people expect when they see names like isEmpty or hasChild.",
    },
  },
]
`;

exports[`question-keys-should-refer-to-booleans.metadata 1`] = `
Object {
  "description": "Make sure columns with keys that start with verbs like \\"is\\" or \\"has\\" contain nothing but booleans.",
  "granularity": 3,
  "isFuzzy": false,
  "name": "question-keys-should-refer-to-booleans",
  "optionsDescription": "
    [boolean-key-prefixes]
      description = \\"Which prefixes should indicate booleans.\\"
      type = \\"string[]\\"
    ",
  "optionsSchema": Object {
    "boolean-key-prefixes":  {
      "_description": null,
      "_examples": Array [],
      "_flags": Object {
        "presence": "required",
        "sparse": false,
      },
      "_inner": Object {
        "exclusions": Array [],
        "inclusions": Array [
           {
            "_description": null,
            "_examples": Array [],
            "_flags": Object {},
            "_inner": Object {},
            "_invalids": Set {
              "_set": Array [
                "",
              ],
            },
            "_meta": Array [],
            "_notes": Array [],
            "_refs": Array [],
            "_settings": null,
            "_tags": Array [],
            "_tests": Array [
              Object {
                "arg": undefined,
                "func": [Function],
                "name": "alphanum",
                "options": undefined,
              },
              Object {
                "arg": 1,
                "func": [Function],
                "name": "min",
                "options": undefined,
              },
            ],
            "_type": "string",
            "_unit": null,
            "_valids": Set {
              "_set": Array [],
            },
            "isJoi": true,
          },
        ],
        "items": Array [
           {
            "_description": null,
            "_examples": Array [],
            "_flags": Object {},
            "_inner": Object {},
            "_invalids": Set {
              "_set": Array [
                "",
              ],
            },
            "_meta": Array [],
            "_notes": Array [],
            "_refs": Array [],
            "_settings": null,
            "_tags": Array [],
            "_tests": Array [
              Object {
                "arg": undefined,
                "func": [Function],
                "name": "alphanum",
                "options": undefined,
              },
              Object {
                "arg": 1,
                "func": [Function],
                "name": "min",
                "options": undefined,
              },
            ],
            "_type": "string",
            "_unit": null,
            "_valids": Set {
              "_set": Array [],
            },
            "isJoi": true,
          },
        ],
        "ordereds": Array [],
        "requireds": Array [],
      },
      "_invalids": Set {
        "_set": Array [],
      },
      "_meta": Array [],
      "_notes": Array [],
      "_refs": Array [],
      "_settings": null,
      "_tags": Array [],
      "_tests": Array [
        Object {
          "arg": 1,
          "func": [Function],
          "name": "min",
          "options": undefined,
        },
        Object {
          "arg": Object {},
          "func": [Function],
          "name": "unique",
          "options": undefined,
        },
      ],
      "_type": "array",
      "_unit": null,
      "_valids": Set {
        "_set": Array [],
      },
      "isJoi": true,
    },
  },
  "prettyName": "Question keys should refer to booleans",
  "rationale": "It's what people expect when they see names like isEmpty or hasChild.",
}
`;
